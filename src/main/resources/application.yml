spring:
  profiles:
    active: local
  application:
    name: pullit
  mvc:
    problem details:
      enabled: true
    async:
      request-timeout: 30m
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://localhost:3306/mydatabase?createDatabaseIfNotExist=true&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
    username: myuser
    password: secret

  jpa:
    defer-datasource-initialization: true
    generate-ddl: true # Explicitly enable DDL generation by Hibernate
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        format_sql: true
        show_sql: false

  sql:
    init:
      mode: always

  flyway:
    enabled: false

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_REST_API_KEY:test-client-id}
            client-secret: ${KAKAO_CLIENT_SECRET:test-client-secret}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope: profile_nickname, account_email
            client-name: Kakao
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

  # Spring Boot DevTools 설정
  devtools:
    restart:
      enabled: true
      additional-paths:
        - "src/main/java"
      additional-exclude: "static/**,public/**"
      # 변경 감지 간격을 1초로 설정 (기본값: 1초)
      poll-interval: 1000ms
      # 재시작 전 대기 시간 (기본값: 400ms)
      quiet-period: 400ms
      # 재시작 트리거 파일 지정
      trigger-file: ".reloadtrigger"
    livereload:
      enabled: true
      # 라이브 리로드 포트 지정 (기본값: 35729)
      port: 35729

  # llm generator 설정
  async:
    executor:
      application-task-executor:
        core-pool-size: 5
        max-pool-size: 10
        queue-capacity: 100
        prefix: TASK-

decorator:
  datasource:
    p6spy:
      enable-logging: true

jwt:
  secret: ${JWT_SECRET_KEY:Yn2kjibddFAWtnPJ2AFlL8WXmohJMCvigQggaEypa5E=}
  issuer: ${JWT_ISSUER:pullit-backend}
  audience: ${JWT_AUDIENCE:pullit-client}
  access-token-expiration-minutes: ${JWT_ACCESS_TOKEN_EXPIRATION_MINUTES:30m}
  refresh-token-expiration-days: ${JWT_REFRESH_TOKEN_EXPIRATION_DAYS:7d}
  authorized-redirect-uris:
    - ${JWT_REDIRECT_URL_1:https://pull.it.kr/login-success}
    - ${JWT_REDIRECT_URL_2:https://localhost:5173/login-success}
    - ${JWT_REDIRECT_URL_3:https://www.pull.it.kr/login-success}
  authorized-cookie-domains:
    - ${JWT_COOKIE_DOMAIN_1:pull.it.kr}
    - ${JWT_COOKIE_DOMAIN_2:localhost}


server:
  error:
    whitelabel:
      enabled: false
    include-exception: true
    # TODO : 운영에서 전체 트레이스 포함할지
    include-stacktrace: ALWAYS
  servlet:
    session:
      cookie:
        same-site: none
        secure: true

info:
  app:
    name: Pullit Local Development
    description: Pullit 스터디 플랫폼 로컬 개발 환경

logging:
  level:
    ROOT: INFO
    kr.it.pullit: DEBUG
    kr.it.pullit.modules.notification.service.NotificationService: INFO
    kr.it.pullit.modules.projection.outbox.relay.OutboxEventRelay: WARN
    org.springframework.security: DEBUG
    java.lang.ProcessBuilder: INFO
    sun.rmi.loader: WARN
    sun.rmi.transport.tcp: WARN
    javax.management.remote.rmi: WARN
    # org.hibernate.orm.jdbc.bind: TRACE
    p6spy: INFO
  pattern:
    console: "%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX} %5p ${PID:- } --- [%15.15t] %-40.40logger{39} : %m%n"

# 로컬 개발용 기본 사용자 (프로덕션에서는 제거하고 환경변수 사용)

management:
  endpoint:
    health:
      show-details: always
    env:
      show-values: always
  endpoints:
    web:
      exposure:
        include: "*"



cors:
  allowed-origins:
    - ${ACCESS_CONTROL_ALLOWED_ORIGINS:https://localhost:5173, https://local.pull.it.kr:5173, https://pull.it.kr, https://www.pull.it.kr}
  # CORS 캐시 시간 (초 단위) - 개발: 5분, 운영: 1시간
  max-age-seconds: ${CORS_MAX_AGE_SECONDS:300}

app:
  gemini:
    api-key: ${GEMINI_API_KEY:test}
  storage:
    s3:
      bucket-name: "pullit-uploaded-files"
      region: "ap-northeast-2"
      access-key: ${S3_ACCESS_KEY:test}
      secret-key: ${S3_SECRET_KEY:test}
      presigned-url-expiration: PT15M
      base-path: learning-sources
  notification:
    sse-cache-size: 10000

# OpenAPI/Swagger 설정
springdoc:
  # Swagger UI 페이지 경로를 설정합니다.
  swagger-ui:
    path: /swagger-ui.html
  # API 문서의 기본 경로를 설정합니다.
  api-docs:
    path: /api-docs
  # 문서에 포함할 API 경로 패턴을 지정합니다.
  paths-to-match:
    - /api/**
    - /auth/**
    - /admin/**
