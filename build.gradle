// 프로젝트 플러그인 설정
plugins {
    id 'java'
    id 'groovy'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version "7.2.1"
    id 'checkstyle'
    id "io.sentry.jvm.gradle" version "5.12.0"
    id 'jacoco'
    id 'org.springdoc.openapi-gradle-plugin' version '1.9.0'
}

sentry {
    // Generates a JVM (Java, Kotlin, etc.) source bundle and uploads your source code to Sentry.
    // This enables source context, allowing you to see your source
    // code as part of your stack traces in Sentry.
    // '-PsentryEnabled=true' Gradle 프로퍼티가 있을 때만 소스 컨텍스트를 포함하도록 설정
    includeSourceContext = project.hasProperty('sentryEnabled') && project.property('sentryEnabled').toBoolean()

    org = "pullit"
    projectName = "java-spring-boot"
    authToken = System.getenv("SENTRY_AUTH_TOKEN")
}

// 프로젝트 기본 정보
group = 'kr.it.pullit'
version = '0.0.1-SNAPSHOT'
description = 'pullit'

// Java 버전 설정 (JDK 21 사용)
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// 코드 포맷팅 설정 (Google Java Format 사용)
spotless {
    java {
        googleJavaFormat('1.28.0')
        target 'src/**/*.java'
    }
}

// 코드 스타일 검사 설정 (Google Checkstyle 사용)
checkstyle {
    toolVersion = '11.0.1'
    configFile = file("config/checkstyle/google_checks.xml")
    configProperties["org.checkstyle.google.suppressionfilter.config"] = file("config/checkstyle/checkstyle-suppressions.xml")
    ignoreFailures = false
    maxWarnings = 0
}

// 코드 품질 통합 체크 태스크
tasks.register("codeCheck") {
    group = "verification"
    description = "Run all code quality checks."
    dependsOn("spotlessCheck")
    dependsOn("checkstyleMain")
}

// git hooks 업데이트
tasks.register("updateGitHooks", Copy) {
    group = "Git hooks"
    description = "Update git hooks files"
    from "./scripts/pre-push"
    into './.git/hooks/'
    fileMode 0775
}

// 의존성 구성 설정
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

// 의존성 저장소 설정 (Maven Central 사용)
repositories {
    mavenCentral()
}

// Spring Cloud 버전 설정 awspring/spring-cloud-aws GitHub 릴리스 페이지 확인
ext {
    set('springCloudVersion', "2025.0.0")
}

// 의존성 설정
dependencies {
    // Spring Boot 스타터 (코어 기능)
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.1'

    // AI SDK
    implementation 'com.google.genai:google-genai:1.15.0'

    // 코드 생성 도구
    implementation 'com.auth0:java-jwt:4.4.0'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // 데이터베이스 마이그레이션 도구
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    // 회로 차단기 및 탄력성 패턴
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.13'
    implementation 'org.apache.commons:commons-lang3:3.18.0'

    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.2.0'

    // OpenAPI 문서 생성용 추가 의존성
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.8.11'

    // AOP 및 개발 도구
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    // 모니터링 및 데이터베이스 드라이버
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    // AWS
    implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:3.4.0")
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // JWT 라이브라리
    implementation 'com.auth0:java-jwt:4.4.0'
    implementation 'io.sentry:sentry-log4j2:8.22.0'
    implementation 'io.sentry:sentry-logback:8.22.0'
    implementation 'org.apache.groovy:groovy:4.0.21'

    // 테스트 의존성
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'com.h2database:h2'

    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'com.squareup.okhttp3:okhttp-sse'
}

// 의존성 버전 관리 (BOM 사용)
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// 테스트 실행 설정 (JUnit 5 사용)
tasks.named('test') {
    useJUnitPlatform()
    environment 'AWS_REGION', 'ap-northeast-2'
    jvmArgs '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED'
}

// JaCoCo 설정
jacoco {
    toolVersion = "0.8.12"
}

tasks.named('test') {
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
        csv.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            "**/*Application*",
                            "**/config/**",
                            "**/dto/**",
                            "**/vo/**",
                            "**/enums/**",
                            "**/exception/**",
                            "**/handler/**",
                            "**/jwt/**",
                            "**/principal/**",
                            "**/util/**",
                            "**/kr/it/pullit/platform/**",
                            "**/kr/it/pullit/shared/**"
                    ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0
            }
        }
    }
}

tasks.named('check') {
    dependsOn jacocoTestCoverageVerification
}

// Function to create a Jacoco report task for a specific domain
def createJacocoDomainReportTask(String domainName, String domainPath) {
    tasks.create("jacoco${domainName.capitalize()}Report", JacocoReport) {
        description = "Generate Jacoco test coverage report for the $domainName domain."

        dependsOn test

        sourceSets sourceSets.main

        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, include: [domainPath])
        }))

        executionData.setFrom(fileTree(dir: "$buildDir/jacoco", includes: ["*.exec"]))

        reports {
            xml.required = true
            html.required = true
            csv.required = true
            html.outputLocation = layout.buildDirectory.dir("reports/jacoco/$domainName")
        }
    }
}

// Define domains and their paths
def domains = [
    auth: "kr/it/pullit/modules/auth/**",
    commonfolder: "kr/it/pullit/modules/commonfolder/**",
    home: "kr/it/pullit/modules/home/**",
    learningsource: "kr/it/pullit/modules/learningsource/**",
    member: "kr/it/pullit/modules/member/**",
    notification: "kr/it/pullit/modules/notification/**",
    learnstats: "kr/it/pullit/modules/projection/learnstats/**",
    outbox: "kr/it/pullit/modules/projection/outbox/**",
    questionset: "kr/it/pullit/modules/questionset/**",
    wronganswer: "kr/it/pullit/modules/wronganswer/**"
]

// Create tasks for each domain
domains.each { domainName, domainPath ->
    createJacocoDomainReportTask(domainName, domainPath)
}

// Create an aggregate task that runs all domain reports
tasks.register("jacocoAllDomainReports") {
    group = "verification"
    description = "Generate Jacoco test coverage reports for all domains."
    dependsOn domains.keySet().collect { "jacoco${it.capitalize()}Report" }
}

// springdoc-openapi-gradle-plugin 설정
openApi {
    outputDir = file("docs/api")
    outputFileName = "spec.yaml"

    // 플러그인이 연결할 URL을 명시적으로 지정합니다. (HTTP, 8088 포트)
    apiDocsUrl = "http://localhost:8088/api-docs"

    // 문서 생성 태스크를 위한 별도의 실행 설정을 정의합니다.
    customBootRun {
        // Docker Compose가 프로젝트 루트의 compose.yaml 파일을 찾도록 작업 디렉터리를 설정합니다.
        workingDir = project.projectDir

        // .env 파일을 읽어 모든 속성을 시스템 속성으로 동적으로 주입합니다.
        def envFile = new File(project.projectDir, ".env")
        if (envFile.exists()) {
            envFile.eachLine { line ->
                // 주석이나 빈 줄은 건너뜁니다.
                if (line.trim() && !line.trim().startsWith("#")) {
                    def parts = line.split("=", 2)
                    if (parts.length == 2) {
                        def key = parts[0].trim()
                        def value = parts[1].trim()
                        // 따옴표 제거 (선택 사항이지만 권장)
                        if ((value.startsWith('"') && value.endsWith('"')) || (value.startsWith("'") && value.endsWith("'"))) {
                            value = value.substring(1, value.length() - 1)
                        }
                        systemProperties.put(key, value)
                    }
                }
            }
        }

        // 임시 서버가 HTTPS 대신 HTTP를 사용하고, 8088 포트를 사용하도록 강제합니다.
        systemProperties.put("server.port", "8088")
        systemProperties.put("server.ssl.enabled", "false")
    }
}
